#!/usr/bin/env bash
#
# Author: Wayne E. Seguin <wayneeseguin@gmail.com>
#

usage() {
  cat <<USAGE

OCFP Genesis BOSH ('gb') Operations Script

USAGE: ${0//*\/} <sub-command>

WHERE <sub-command> is one of:

  bosh(b) <env-re>               - Run BOSH cli commands targeting env
  logs(l) <env-re> <dep-re>      - Fetch BOSH logs for env/dep to ~/logs
  ssh(s) <env-re> <dep-re> <job> - SSH to BOSH job
  deps(d) <env-re>               - List BOSH deployments
  manifest(m) <env-re> <dep-re>  - Fetch BOSH manifest for env/dep
  instances(i) <env-re> <dep-re> - List instances for a deployment
  ips(ips) <env-re> <dep-re>     - list IPs for a given deployment
  vms(v) <env-re> <dep-re>       - list vms for a deployment
  vmsdo <env-re> <dep-re> <cmd>  - Run command on each vm in a deployment
  resurrection(r) on|off <vms>   - Set BOSH resurrection on/off for <vms>

Prerequisites:
  
  safe, genesis, bosh - in PATH
  safe targeting a vault, and authenticated

Environment Variables:
  
  BOSH_DEPLOYMENTS_PATH - Path to the genesis bosh kit deployments directory
                          Default: ~/deployments/bosh
  LOGS_PATH             - Logs path to download and process bosh logs into
                          Default: ~/logs
  
Examples:

  Show deps for ocfp-mgmt-us-east-1 bosh director:
  $ ${0//*\/} b mgmt-us-e deps

  Upload a release to the ocfp-mgmt-us-east-1 bosh director:
  $ ${0//*\/} b mgmt-us-e upload-release \$PWD/my-bosh-release-0.0.1.tgz

  Fetch diego-cell logs for cf from ocfp-sbx-us-east-1 bosh director:
  $ ${0//*\/} l sbx-us-e -cf diego-cell 

  Fetch gorouter logs from router vms using director ocfp-sbx-us-east-1 cf deployment:
  $ ${0//*\/} l sbx-us-e -cf router --job gorouter 

  ssh onto the first router for cf deployment on ocfp-sbx-us-east-1 bosh director:
  $ ${0//*\/} s sbx-us-e -cf router/0

  Show deployments for ocfp-sbx-us-east-1
  $ ${0//*\/} d sbx-us-e
  
USAGE
  exit 0
}

fail() { echo -e "\e[31mERROR:\e[0m $*" >&2 ; exit 1 ; }

safe::auth::check() {
  local status=$(safe auth status --json | jq -r '.valid')

  [[ ${status} == "true" ]] ||
    fail "safe auth status is not valid, please safe auth and try again."
}

bosh::vaildate::environment() {
  local _cmd

  if [[ -n "${BOSH_DEPLOYMENTS_PATH:-}" ]]
  then bosh_path="${BOSH_DEPLOYMENTS_PATH}"
  else bosh_path="${HOME}/deployments/bosh"
  fi
  
  [[ -d "${bosh_path}" ]] ||
    fail "${FUNCNAME}:  BOSH deployments path '${bosh_path}' does not exist"
  
  for _cmd in genesis bosh safe
  do
    command -v "${_cmd}" &>/dev/null ||
      fail "${FUNCNAME}: \`${_cmd}\` was not found in PATH."
  done
}

find::env::file() {
  local _env="${1%.yml}" _env_file

  shift ||
    fail "${FUNCNAME}: find::env requires an environment name."

  local _yamls=($(
    find ${bosh_path} -maxdepth 1 -iname "*${_env}*.yml" -print |
      sort -d | head -1
  ))

  [[ ${#_yamls[@]} > 0 ]] ||
    fail "${FUNCNAME}: No bosh env files found matching regex '${_env}'"

  [[ ${#_yamls[@]} < 2 ]] ||
    fail "${FUNCNAME}: Multiple bosh env files found matching regex '${_env}': ${_yamls[*]}"

  [[ -s "${_yamls[0]}" ]] || fail "The env file '${_env_file}' is empty!"

  _env_file="${_yamls[0]}"

  echo "${_env_file}"
}

find::env() {
  local _env="${1%.yml}" _env_file

  shift ||
    fail "${FUNCNAME}: find::env requires an environment name."

  _env_file=$(find::env::file "${_env}")

  echo ${_env_file%.yml}
}

bosh::do() {
  local _env="${1%.yml}" 

  shift ||
    fail "${FUNCNAME}: bosh::do requires an environment name."
  
  _env_file="$(find::env::file "${_env}")"
  (
    cd $(dirname "${_env_file}")
    eval "$(genesis "${_env_file}" bosh -A --connect)"
    exec bosh "$@"
  )
}

bosh::logs::fetch() {
  local _env_regex="${1%.yml}" _dep_regex="$2"
  shift 2 ||
    fail "${FUNCNAME}: bosh::logs requires an env regex followed by a deployment regex."

  local _logs_path="${LOGS_PATH:-"${HOME}/logs"}"
  local _env=$(find::env "${_env_regex}")
  local _env_name="${_env//*\/}"

  local _dep=$(bosh::deployments::find ${_env_name} ${_dep_regex})

  [[ -n "${_dep}" ]] ||
    fail "${FUNCNAME}: No bosh deps found matching regex '${_dep_regex}' in env '${_env}'"

  echo -e "Fetching logs from bosh ${_env_name} deployment ${_dep}\n"
  bosh::do ${_env_name} -d ${_dep} logs "${@}"
  
  local _f _fn _job _vmid _ts

  local _dep_logs_path="${_logs_path}/${_env_name}/${_dep}"
  mkdir -p "${_dep_logs_path}"

  local _archives=($(find "${bosh_path}" -maxdepth 1 -iname "${_dep}*.tgz" -print))
  for _f in "${_archives[@]}"
  do tar -zxf "${_f}" -C "${_dep_logs_path}" ; rm -f "${_f}"
  done

  echo
  local _dep_archives=($(find "${_dep_logs_path}" -maxdepth 1 -iname '*.tgz' -print))
  for _f in "${_dep_archives[@]}"
  do
    _fn=$(basename ${_f//*\/})
    _job=$(echo ${_fn}  | awk -F. '{print $1}')
    _vmid=$(echo ${_fn} | awk -F. '{print $2}')
    _ts=$(echo ${_fn}   | awk -F. '{print $3}')
  
    echo -e "Extracting logs into ${_dep_logs_path}/${_job}/"
    mkdir -p "${_dep_logs_path}/${_job}/${_vmid}/${_ts}"
    tar -zxf "${_f}" -C "${_dep_logs_path}/${_job}/${_vmid}/${_ts}" 
    rm -f "${_f}"
  done
}

bosh::ssh() {
  local _env="${1%.yml}" _dep_regex="$2"

  shift 2 ||
    fail "${FUNCNAME}: bosh::ssh requires an env regex followed by a deployment regex."

  _dep=$(bosh::deployments::find ${_env} ${_dep_regex})

  [[ -n "${_dep}" ]] ||
    fail "${FUNCNAME}: No bosh deps found matching regex '${_dep_regex}' in env '${_env}'"

  bosh::do ${_env} -d ${_dep} ssh "${@}"
}

bosh::deployments::list() {
  local _env="${1}"

  shift ||
    fail "${FUNCNAME}: bosh::deployments::list requires an environment name."

  bosh::do ${_env} deployments --json 2>/dev/null |
    jq -r '.Tables[].Rows[].name'
}

bosh::deployments() {
  local _env="${1}"

  shift ||
    fail "${FUNCNAME}: bosh::deployments requires an environment name."

  bosh::do ${_env} deployments "${@}"
}

bosh::deployments::find() {
  local _env=${1} _dep_regex=${2} _dep 
  declare -a _deps

  shift 2 ||
    fail "${FUNCNAME}: bosh::deployment requires an env regex followed by a deployment regex."

  _deps=($(bosh::deployments::list ${_env}))
  for _dep in "${_deps[@]}"
  do [[ "${_dep}" =~ ${_dep_regex} ]] && echo ${_dep} && break # return first match
  done
}

bosh::manifest() {
  local _env="${1}" _dep_regex="$2" _dep

  shift 2 ||
    fail "${FUNCNAME}: bosh::manifest requires an env regex followed by a deployment regex."

  _dep=$(bosh::deployments::find ${_env} ${_dep_regex})

  [[ -n ${_dep} ]] ||
    fail "${FUNCNAME}: No bosh deployments found matching regex '${_dep_regex}' in env '${_env}'"

  bosh::do ${_env} -d ${_dep} manifest "${@}"
}

bosh::instances() {
  local _env="${1}" _dep_regex="$2" _dep

  shift 2 ||
    fail "${FUNCNAME}: bosh::manifest requires an env regex followed by a deployment regex."

  _dep=$(bosh::deployments::find ${_env} ${_dep_regex})

  [[ -n ${_dep} ]] ||
    fail "${FUNCNAME}: No bosh deployments found matching regex '${_dep_regex}' in env '${_env}'"

  bosh::do ${_env} -d ${_dep} instances "${@}"
  #--json 2>/dev/null | jq -r '.Tables[].Rows[].instance'
}

bosh::ips() {
  local _env="${1}" _dep_regex="$2" _dep

  shift 2 ||
    fail "${FUNCNAME}: bosh::manifest requires an env regex followed by a deployment regex."

  _dep=$(bosh::deployments::find ${_env} ${_dep_regex})

  [[ -n ${_dep} ]] ||
    fail "${FUNCNAME}: No bosh deployments found matching regex '${_dep_regex}' in env '${_env}'"

  bosh::do ${_env} -d ${_dep} instances "${@}"
  #--json 2>/dev/null | jq -r '.Tables[].Rows[].ips'
}

bosh::vms() {
  local _env="${1}" _dep_regex="$2" _dep

  shift 2 ||
    fail "${FUNCNAME}: bosh::manifest requires an env regex followed by a deployment regex."

  _dep=$(bosh::deployments::find ${_env} ${_dep_regex})

  [[ -n ${_dep} ]] ||
    fail "${FUNCNAME}: No bosh deployments found matching regex '${_dep_regex}' in env '${_env}'"

  bosh::do ${_env} -d ${_dep} vms "${@}"
  #--json 2>/dev/null | jq -r '.Tables[].Rows[].vms'
}

bosh::vms::do() {
  local _env_regex="$1" _dep_regex="$2" _vms _vm

  shift 2 ||
    fail "${FUNCNAME}: bosh::vms requires an env regex followed by a deployment regex."

  _vms=($(bosh::instances ${_env_regex} ${_dep_regex}))
  _dep=$(bosh::deployments::find ${_env} ${_dep_regex})

  [[ -n ${_dep} ]] ||
    fail "${FUNCNAME}: No bosh deployments found matching regex '${_dep_regex}' in env '${_env}'"

  for _vm in "${_vms[@]}"
  do bosh::ssh ${_env} ${_dep} ${_vm} "${@}"
  done
}

bosh::resurrection() {
  local _env_regex="$1" _dep_regex="$2"

  shift 2 ||
    fail "${FUNCNAME}: bosh::vms requires an env regex followed by a deployment regex."

  _dep=$(bosh::deployments::find ${_env} ${_dep_regex})

  bosh::do ${_env} -d ${_dep} update-resurrection "${@}"
}

declare bosh_path

cmd="${1}" ; shift || usage

safe::auth::check

bosh::vaildate::environment
  
case "${cmd}" in
  (b|bosh)     
    bosh::do "${@}" 
    ;;
  (l|logs)     
    bosh::logs::fetch "${@}" 
    ;;
  (s|ssh)      
    bosh::ssh "${@}" 
    ;;
  (d|deps)     
    bosh::deployments "${@}" 
    ;;
  (m|manifest) 
    bosh::manifest "${@}" 
    ;;
  (i|instances)      
    bosh::instances "${@}" 
    ;;
  (ips)      
    bosh::ips "${@}" 
    ;;
  (v|vms)      
    bosh::vms "${@}" 
    ;;
  (vmsdo)      
    bosh::vms::do "${@}" 
    ;;
  (r|resurrection)      
    bosh::resurrection "${@}" 
    ;;
  (usage|*)
    usage 
    ;;
esac

exit 0
